import bodyParser from 'body-parser';
import * as debug from 'debug';
import { extractCritical } from 'emotion-server';
import express, { response } from 'express';
import expressStaticGzip from 'express-static-gzip';
import helmet from 'helmet';
import path from 'path';
import PrettyError from 'pretty-error';
import * as React from 'react';
import * as ReactDOM from 'react-dom/server';
import { Provider } from 'react-redux';
import { StaticRouter as Router } from 'react-router-dom';
import cookiesMiddleware from 'universal-cookie-express';
import App from './app/App';
import ErrorPage from './app/ErrorPage/index';
import Html from './app/Html';
// @ts-ignore file generated by webpack in dev and prod
import chunks from './chunk-manifest.json';
import config, { getConfigValue, setupConfigSource } from './config';
import { create as createHttp } from './http';
import { redirects } from './redirects';
import { initialState } from './reducers/rootReducer';
import { setRuntimeVariable } from './reducers/runtime';
import configureStore from './store/configureStore';

const app = express();

global.navigator = global.navigator || ({} as typeof navigator);
global.navigator.userAgent = global.navigator.userAgent || 'all';

//
// Register Node.js middleware
// -----------------------------------------------------------------------------

app.use(helmet());

app.use('/', expressStaticGzip(path.join(__dirname, 'public'), { index: false }));
app.use(cookiesMiddleware());

app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
app.disable('x-powered-by');

if (__DEV__) {
  app.enable('trust proxy');
  debug.enable('go:*');
}

app.get('/_healthcheck', (_, res) => {
  res.status(200).send('OK');
});

//
// Register server-side rendering middleware
// -----------------------------------------------------------------------------
app.get('*', async (req, res, next) => {
  try {
    const { headers, universalCookies, url } = req;

    const http = createHttp();

    // Note: headers.cookie may not exist when in e.g. private browsing
    // so we need to allow for that situation
    const store = configureStore(
      {
        ...initialState,
      },
      {
        cookies: universalCookies,
        http,
      }
    );

    store.dispatch(
      setRuntimeVariable({
        name: 'initialNow',
        value: Date.now(),
      })
    );

    // Global (context) variables that can be easily accessed from any React component
    // https://facebook.github.io/react/docs/context.html
    const context = {
      store,
      http,
    };

    const data = {} as any;
    const staticContext = {} as any;

    const Root = () => (
      <Provider store={context.store}>
        <Router location={url} context={staticContext}>
          <App context={context} />
        </Router>
      </Provider>
    );

    let render = null;
    let loop = false;
    do {
      loop = false;
      try {
        render = ReactDOM.renderToString(<Root />);
      } catch (e) {
        if (e instanceof Promise) {
          await e;
          loop = true;
        } else {
          throw e;
        }
      }
    } while (loop);

    // Here is where we actually render the page content to be passed to <Html/>
    const Emotion = extractCritical(render);

    if (staticContext.url) {
      res.status(301);
      res.setHeader('Location', staticContext.url);
      res.send();
      return;
    }

    data.children = Emotion.html;
    data.styles = [{ id: 'css', cssText: Emotion.css }];

    const scripts = new Set();
    const addChunk = (chunk: string) => {
      if (chunks[chunk]) {
        chunks[chunk].forEach((asset: string) => {
          scripts.add(asset);
        });
      } else if (__DEV__) {
        throw new Error(`Chunk with name '${chunk}' cannot be found`);
      }
    };
    addChunk('client');

    data.scripts = Array.from(scripts);

    // Get a FRESH copy of the state
    data.state = store.getState();

    setupConfigSource();
    data.config = config.exportKeys.map(key => ({ [key]: getConfigValue(key) })).reduce((acc, curr) => ({ ...acc, ...curr }));

    const html = ReactDOM.renderToStaticMarkup(<Html {...data} />);

    res.status(200);
    res.send(`<!doctype html>${html}`);
  } catch (error) {
    console.log(error);
    next(error);
  }
});

//
// Error handling
// -----------------------------------------------------------------------------
const pe = new PrettyError();
pe.skipNodeFiles();
pe.skipPackage('express');

app.use((err: Error, _REQ: express.Request, res: express.Response, _NEXT: express.NextFunction) => {
  const { html: errorHtml, css } = extractCritical(ReactDOM.renderToString(<ErrorPage />));

  const html = ReactDOM.renderToStaticMarkup(
    <Html title="Internal Server Error" description={err.message} styles={[{ id: 'css', cssText: css }]}>
      {errorHtml}
    </Html>
  );
  res.status(500);
  res.send(`<!doctype html>${html}`);
});

//
// Launch the server
// -----------------------------------------------------------------------------
if (!module.hot) {
  app.listen(config.port, () => console.log(`The server is running at http://localhost:${config.port}/`));
}

//
// Hot Module Replacement
// -----------------------------------------------------------------------------
if (module.hot) {
  // @ts-ignore could not overwrite `core.Express`
  app.hot = module.hot;
  // @ts-ignore could not overwrite `core.Express`
  module.hot.accept('./client');
}

export default app;
